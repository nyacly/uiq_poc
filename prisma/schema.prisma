// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(MEMBER)
  avatarUrl     String?
  phone         String?
  location      String?
  whatsappLink  String?
  membershipTier MembershipTier @default(FREE)
  accounts      Account[]
  sessions      Session[]
  businesses    Business[]
  listings      Listing[]
  announcements Announcement[]
  events        Event[] @relation("OrganiserEvents")
  rsvps         RSVP[]
  reviews       Review[]
  messages      Message[] @relation("UserMessages")
  threads       Thread[] @relation("UserThreads")
  createdAt     DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  MEMBER
  BUSINESS_OWNER
  ADMIN
}

enum MembershipTier {
  FREE
  PLUS
  FAMILY
}

model Business {
  id               String       @id @default(cuid())
  owner            User         @relation(fields: [ownerId], references: [id])
  ownerId          String
  name             String
  slug             String       @unique
  description      String
  category         String
  competenceTags   String
  certifications   String
  address          String
  lat              Float
  lng              Float
  serviceRadiusKm  Int          @default(15)
  phone            String?
  email            String?
  website          String?
  whatsappLink     String?
  plan             BusinessPlan @default(BASIC)
  verified         Boolean      @default(false)
  ratingAvg        Float        @default(0)
  ratingCount      Int          @default(0)
  reviews          Review[]
  createdAt        DateTime     @default(now())
}

enum BusinessPlan {
  BASIC
  STANDARD
  PREMIUM
}

model Review {
  id         String   @id @default(cuid())
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  rating     Int
  text       String
  photos     String
  createdAt  DateTime @default(now())
}

model Event {
  id          String   @id @default(cuid())
  title       String
  category    String
  description String
  startAt     DateTime
  endAt       DateTime
  venue       String
  lat         Float
  lng         Float
  priceCents  Int      @default(0)
  organiser   User     @relation("OrganiserEvents", fields: [organiserId], references: [id])
  organiserId String
  rsvps       RSVP[]
  photos      String
  createdAt   DateTime @default(now())
}

model RSVP {
  id        String     @id @default(cuid())
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  status    RSVPStatus @default(GOING)
  createdAt DateTime   @default(now())

  @@unique([eventId, userId])
}

enum RSVPStatus {
  GOING
  INTERESTED
}

model Announcement {
  id                String             @id @default(cuid())
  type              AnnouncementType
  title             String
  body              String
  photos            String
  author            User               @relation(fields: [authorId], references: [id])
  authorId          String
  verified          Boolean            @default(false)
  featured          Boolean            @default(false)
  contributionMode  ContributionMode   @default(LINKOUT)
  contributionLinks String
  ceremonyTimeline  String?
  createdAt         DateTime           @default(now())
}

enum AnnouncementType {
  BEREAVEMENT
  WEDDING
  BIRTH
  ACHIEVEMENT
  NOTICE
}

enum ContributionMode {
  LINKOUT
  MANAGED
}

model Program {
  id          String    @id @default(cuid())
  title       String
  org         String
  eligibility String
  deadlineAt  DateTime?
  applyUrl    String
  description String
  tags        String
}

model Opportunity {
  id          String    @id @default(cuid())
  title       String
  type        String // job|internship|grant|training|volunteer
  location    String
  deadlineAt  DateTime?
  applyUrl    String
  description String
}

model Listing {
  id           String   @id @default(cuid())
  type         String // sale|housing|gig
  title        String
  slug         String   @unique
  priceCents   Int
  currency     String   @default("AUD")
  condition    String
  photos       String
  description  String
  location     String
  lat          Float
  lng          Float
  owner        User     @relation(fields: [ownerId], references: [id])
  ownerId      String
  status       String   @default("active")
  boostedUntil DateTime?
  createdAt    DateTime @default(now())
}

model Thread {
  id              String    @id @default(cuid())
  subject         String
  participantIds  String
  lastMessageAt   DateTime  @default(now())
  messages        Message[]
  participants    User[]    @relation("UserThreads")
}

model Message {
  id       String @id @default(cuid())
  thread   Thread @relation(fields: [threadId], references: [id])
  threadId String
  sender   User   @relation("UserMessages", fields: [senderId], references: [id])
  senderId String
  body     String
  createdAt DateTime @default(now())
}

